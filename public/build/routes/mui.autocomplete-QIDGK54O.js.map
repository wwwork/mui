{
  "version": 3,
  "sources": ["../../../app/routes/mui.autocomplete.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/mui.autocomplete.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/mui.autocomplete.tsx\");\n  import.meta.hot.lastModified = \"1746376378399.0598\";\n}\n// REMIX HMR END\n\nimport { Autocomplete, Stack, TextField } from \"@mui/material\";\nimport { useState } from \"react\";\nconst skills = [\"Test,\", \"html\", \"js\", \"ts\", \"phyton\"];\nconst skillsOptions = skills.map((item, index) => ({\n  id: index + 1,\n  label: item\n}));\nexport default function AutocompleteDemo() {\n  _s();\n  const [value, setValue] = useState(null);\n  const [skill, setSkill] = useState(null);\n  console.log({\n    value\n  });\n  console.log({\n    skill\n  });\n  return <Stack spacing={2} width={\"240px\"}>\n      <Autocomplete options={skills} value={value} onChange={(event, newValue) => setValue(newValue)} renderInput={params => <TextField {...params} label=\"MuiAuticomplete\" />} freeSolo />\n\n      <Autocomplete options={skillsOptions.length ? skillsOptions : []} value={skill} onChange={(event, newValue) => setSkill(newValue)} renderInput={params => <TextField {...params} label=\"rest\" />} />\n    </Stack>;\n}\n_s(AutocompleteDemo, \"Ughnrkd+33u72FValJKLmT0zwV0=\");\n_c = AutocompleteDemo;\nvar _c;\n$RefreshReg$(_c, \"AutocompleteDemo\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;AAsBA,mBAAyB;AAiBoG;AAtC7H,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,sCAAwC,EAAE;AAAA,EACnF;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAAiC;AACjC,cAAY,IAAI,eAAe;AACjC;AAKA,IAAM,SAAS,CAAC,SAAS,QAAQ,MAAM,MAAM,QAAQ;AACrD,IAAM,gBAAgB,OAAO,IAAI,CAAC,MAAM,WAAW;AAAA,EACjD,IAAI,QAAQ;AAAA,EACZ,OAAO;AACT,EAAE;AACa,SAAR,mBAAoC;AACzC,KAAG;AACH,QAAM,CAAC,OAAO,QAAQ,QAAI,uBAAS,IAAI;AACvC,QAAM,CAAC,OAAO,QAAQ,QAAI,uBAAS,IAAI;AACvC,UAAQ,IAAI;AAAA,IACV;AAAA,EACF,CAAC;AACD,UAAQ,IAAI;AAAA,IACV;AAAA,EACF,CAAC;AACD,SAAO,mDAAC,iBAAM,SAAS,GAAG,OAAO,SAC7B;AAAA,uDAAC,wBAAa,SAAS,QAAQ,OAAc,UAAU,CAAC,OAAO,aAAa,SAAS,QAAQ,GAAG,aAAa,YAAU,mDAAC,qBAAW,GAAG,QAAQ,OAAM,qBAA7B;AAAA;AAAA;AAAA;AAAA,WAA+C,GAAI,UAAQ,QAAlL;AAAA;AAAA;AAAA;AAAA,WAAmL;AAAA,IAEnL,mDAAC,wBAAa,SAAS,cAAc,SAAS,gBAAgB,CAAC,GAAG,OAAO,OAAO,UAAU,CAAC,OAAO,aAAa,SAAS,QAAQ,GAAG,aAAa,YAAU,mDAAC,qBAAW,GAAG,QAAQ,OAAM,UAA7B;AAAA;AAAA;AAAA;AAAA,WAAoC,KAA9L;AAAA;AAAA;AAAA;AAAA,WAAkM;AAAA,OAH/L;AAAA;AAAA;AAAA;AAAA,SAIL;AACJ;AACA,GAAG,kBAAkB,8BAA8B;AACnD,KAAK;AACL,IAAI;AACJ,aAAa,IAAI,kBAAkB;AAEnC,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": []
}
