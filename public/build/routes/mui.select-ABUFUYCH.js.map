{
  "version": 3,
  "sources": ["../../../app/routes/mui.select.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/mui.select.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/mui.select.tsx\");\n  import.meta.hot.lastModified = \"1746377054448.1318\";\n}\n// REMIX HMR END\n\nimport { Box, TextField, MenuItem } from \"@mui/material\";\nimport React, { useState } from \"react\";\nexport default function SelectDemo() {\n  _s();\n  const [countries, setCountries] = useState([]);\n  console.log(countries);\n  const handleChange = event => {\n    const value = typeof event.target.value === \"string\" ? event.target.value.split(\",\") : event.target.value;\n    setCountries(value);\n  };\n  return <>\n      <Box width=\"250px\">\n        <TextField label=\"Select country\" select value={countries} onChange={handleChange} fullWidth SelectProps={{\n        multiple: true\n      }} size=\"small\" helperText=\"pls select country\" color=\"secondary\" error>\n          <MenuItem value=\"in\"> India</MenuItem>\n          <MenuItem value=\"us\"> USA</MenuItem>\n          <MenuItem value=\"au\"> Australia</MenuItem>\n        </TextField>\n      </Box>\n    </>;\n}\n_s(SelectDemo, \"gwqfcWgq2x/FJogDCUDGbZQoAlg=\");\n_c = SelectDemo;\nvar _c;\n$RefreshReg$(_c, \"SelectDemo\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;AAsBA,mBAAgC;AASvB;AA9BT,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,gCAAkC,EAAE;AAAA,EAC7E;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAA2B;AAC3B,cAAY,IAAI,eAAe;AACjC;AAKe,SAAR,aAA8B;AACnC,KAAG;AACH,QAAM,CAAC,WAAW,YAAY,QAAI,uBAAS,CAAC,CAAC;AAC7C,UAAQ,IAAI,SAAS;AACrB,QAAM,eAAe,WAAS;AAC5B,UAAM,QAAQ,OAAO,MAAM,OAAO,UAAU,WAAW,MAAM,OAAO,MAAM,MAAM,GAAG,IAAI,MAAM,OAAO;AACpG,iBAAa,KAAK;AAAA,EACpB;AACA,SAAO,sFACH,6DAAC,eAAI,OAAM,SACT,6DAAC,qBAAU,OAAM,kBAAiB,QAAM,MAAC,OAAO,WAAW,UAAU,cAAc,WAAS,MAAC,aAAa;AAAA,IAC1G,UAAU;AAAA,EACZ,GAAG,MAAK,SAAQ,YAAW,sBAAqB,OAAM,aAAY,OAAK,MACnE;AAAA,uDAAC,oBAAS,OAAM,MAAK,sBAArB;AAAA;AAAA;AAAA;AAAA,WAA2B;AAAA,IAC3B,mDAAC,oBAAS,OAAM,MAAK,oBAArB;AAAA;AAAA;AAAA;AAAA,WAAyB;AAAA,IACzB,mDAAC,oBAAS,OAAM,MAAK,0BAArB;AAAA;AAAA;AAAA;AAAA,WAA+B;AAAA,OALjC;AAAA;AAAA;AAAA;AAAA,SAMA,KAPF;AAAA;AAAA;AAAA;AAAA,SAQA,KATG;AAAA;AAAA;AAAA;AAAA,SAUL;AACJ;AACA,GAAG,YAAY,8BAA8B;AAC7C,KAAK;AACL,IAAI;AACJ,aAAa,IAAI,YAAY;AAE7B,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": []
}
